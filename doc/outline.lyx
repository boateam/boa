#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{fullpage}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Project in advanced programming - Outline
\end_layout

\begin_layout Author
Edo Cohen
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash
 039374814 
\backslash

\backslash
 sedoc@t2 
\backslash
and 
\end_layout

\end_inset

Tzafrir Rehan
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash
 039811880 
\backslash

\backslash
 tzafrir@cs 
\backslash
and 
\end_layout

\end_inset

Gai Shaked
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash
 036567055 
\backslash

\backslash
 gai@tx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We intend to implement a static Buffer Overrun Analyzer (boa).
 Boa will receive a C program as input, and determine whether a buffer overrun
 is possible during execution of the code.
 This must be done with care - while most static analysis methods result
 in some false positives, extra care should be taken to ensure no false
 negatives (measures not taken in 
\begin_inset CommandInset citation
LatexCommand cite
key "הודים,BOON"

\end_inset

).
 We refer to the lack of false negatives as the 
\emph on
soundness
\emph default
 of the analysis.
\end_layout

\begin_layout Standard
Boa will be implemented in two stages, the first will be context and flow
 insensitive analysis.
 However, context and flow insensitivity is prone to false alarms.
 Therefore, we intend to test limited flow and context sensitivity, which
 we hope will be able to reduce the amount of false positives without leading
 to false negative results.
\end_layout

\begin_layout Standard
Pointer analysis is a main phase of boa.
 We will begin with a naive points-to analysis, in which every pointer is
 suspect of aliasing any other pointer.
 Once preliminary results are achieved, we will attempt to refine this analysis
 while keeping it sound.
 We will explore the algorithm presented in 
\begin_inset CommandInset citation
LatexCommand cite
key "CSSV"

\end_inset

 as a possible basis for this.
\end_layout

\begin_layout Standard
Assumptions:
\end_layout

\begin_layout Itemize
No concurrency (for any flow sensitive analysis)
\end_layout

\begin_layout Itemize
No unions
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Standard
We intend on hooking into Clang's 
\begin_inset CommandInset citation
LatexCommand cite
key "clang"

\end_inset

 static analysis run and create constraints on integers and buffers while
 Clang parses the source code.
 Clang API will be used to generate integer linear programming constraints
 for each buffer and integer in the code.
 These constriants will model the max and min used (and allocated) index
 for each buffer.
 Finally we will use GLPK
\begin_inset CommandInset citation
LatexCommand cite
key "GLPK wiki,GLPK official"

\end_inset

 to solve the integer linear programming problem designated by the constriants,
 and the solution will determine whether buffer overrun is possible.
\end_layout

\begin_layout Standard
If time allows, we will also explore the idea introduced in 
\begin_inset CommandInset citation
LatexCommand cite
key "SMT"

\end_inset

.
 By performing symbolic execution on the sites of the possible buffer overflows,
 we can further differentiate between false positives and true vulnerabilities
 - improving the overall quality of the analysis.
\end_layout

\begin_layout Standard
Basically, this includes: 
\end_layout

\begin_layout Enumerate
Extracting the relevant code snippet.
 This cannot be done perfectly (halting problem anyone?), but this CAN be
 done conservatively.
 In their research, Kim, Lee et al.
 limited this backtracking to within the context of the procedure (assuring
 a linear number of execution paths).
 We will investigate, among other things, if there is some way to expand
 this while retaining scalability, and if this results in a measurable gain
 in filtering false alarms.
 
\end_layout

\begin_layout Enumerate
Translating the snippet into SMT formulae, expressing the constraints in
 quantifier-free FOL.
 This is simple for most statements, but requires special care regarding
 loop blocks and function calls.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Loop blocks are unwound, examining every possible (and feasible) execution
 path until either the loop cannot execute (i.e.
 the post-condition must be satisfied) or a buffer overrun cannot be discredited
 in some iteration.
 This is done recursively, and as far as we can tell from a cursory examination
 – this algorithm cannot be assured to always stop.
 We will investigate this, and possibly add some safeguards to prevent stack
 overflow.
 
\end_layout

\begin_layout Enumerate
Functions calls are not executed symbolically.
 Instead, the constraints generated from the context insensitive analysis
 are used for scalar return values.
 We will also examine this.
 
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Standard
\align block
In order to simplify this process, the source code is translated into a
 subset of C, in which there is only one type of loop, and statements have
 no side effects.
 While it is possible to translate 'goto' statements into this language,
 this adds an additional complexity (possible need for program flow re-structure
).
\end_layout

\begin_layout Standard
We plan to perform two stages of testing: 
\end_layout

\begin_layout Enumerate
Very simple test cases in order to check basic functionality - No buffers
 at all, safe access to buffers, some unsafe access and C library functions
 (strcpy, strlen, etc.), dynamically allocated buffers, some aliasing.
 These will be relatively small programs, written by us, in order to execute
 quickly (unit testing).
 
\end_layout

\begin_layout Enumerate
Real world open-source programs, such as those used in the referenced articles
 (wu-ftpd, sendmail, bind etc.).
 This will enable us to test our project against real-world challenges and
 also enable comparison with previous projects' benchmarks.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "הודים"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Buffer Overrun Detection using Linear Programming and Static Analysis"
target "www.cs.wisc.edu/wisa/papers/ccs03/p351-ganapathy.pdf "

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BOON"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "A First Step Towards Automated Detection of Buffer Overrun Vulnerabilities"
target "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.5348&rep=rep1&type=pdf"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SMT"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Filtering False Alarms of Buffer Overflow Analysis Using SMT Solvers"
target "http://formal.korea.ac.kr/~jlee/papers/Kim-Lee-at-al-IST10.pdf"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "CSSV"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "CSSV: Towards a Realistic Tool for Statically Detecting All Buffer Overflows in C"
target "http://www.cs.tau.ac.il/~msagiv/cssv.pdf"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "clang"

\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://clang.llvm.org/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "GLPK wiki"

\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/GNU_Linear_Programming_Kit"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "GLPK official"

\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://www.gnu.org/software/glpk/"

\end_inset


\end_layout

\end_body
\end_document
