#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{fullpage}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Project in advanced programming - Outline
\end_layout

\begin_layout Author
Edo Cohen
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash
 039374814 
\backslash

\backslash
 sedoc@t2 
\backslash
and 
\end_layout

\end_inset

Tzafrir Rehan
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash
 039811880 
\backslash

\backslash
 tzafrir@cs 
\backslash
and 
\end_layout

\end_inset

Gai Shaked
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash
 036567055 
\backslash

\backslash
 gai@tx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We intend to write a static Buffer Overrun Analyzer (boa).
 Boa receive a C program as an input, and determine whether a buffer overrun
 is possible during an execution of the code.
 Boa will be implemented in two stages, the first will be context and flow
 insensitive analysis, which will always warn about any possible buffer
 ovverun under if -
\end_layout

\begin_layout Itemize
no pointer manipulation regarding buffers
\end_layout

\begin_layout Standard
This relatively humble condition will ensure our solution is sound (i.e.
 boa will always warn if buffer overrun is feasible) but the context and
 flow insensitivity also prone to lots of false alarms.
 Thus we intend to test limited flow and context sensitivity, which we hope
 will be able to reduce the flase positives without letting any possible
 false negative result.
 For this secondphase we will also require that the input C code will not
 include -
\end_layout

\begin_layout Itemize
concurrency 
\end_layout

\begin_layout Itemize
goto statements
\end_layout

\begin_layout Standard
The implementation will be based on Clang 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://clang.llvm.org/"

\end_inset


\end_layout

\end_inset

 as the static analysis front end.
 Clang API will be used to generate integer linear programming constraints
 for each buffer and integer in the code, constriants which will model the
 maximal and minimal used (and allocated) index each buffer.
 Finally we will use GLPK 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/GNU_Linear_Programming_Kit"

\end_inset


\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://www.gnu.org/software/glpk/"

\end_inset


\end_layout

\end_inset

 to solve the integer linear programming problem inflected by the constriants,
 and the solution will determine whether buffer overrun is possible.
\end_layout

\end_body
\end_document
